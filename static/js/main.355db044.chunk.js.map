{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","convertToTime","count","minutes","Math","floor","seconds","handlePlayPause","state","isPlaying","clearInterval","loop","setState","setInterval","clockCount","currentTimer","sessionbreak","session","document","getElementById","play","undefined","breakincrement","bind","breakdecrement","sessionincrement","sessiondecrement","handleReset","this","parseInt","pause","currentTime","className","id","onClick","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.355db044.chunk.js","sourcesContent":["import './App.css';\nimport { TiArrowSortedUp, TiArrowSortedDown, TiMediaStop, TiMediaPlay } from \"react-icons/ti\"\nimport { BiReset} from \"react-icons/bi\"\nimport React, { Component } from 'react'\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.loop = undefined;\n    this.state = {\n      session : 25,\n      sessionbreak : 5,\n      clockCount : 25*60,\n      currentTimer: 'Session',\n      isPlaying: false\n    }\n    this.breakincrement = this.breakincrement.bind(this);\n    this.breakdecrement = this.breakdecrement.bind(this);\n    this.sessionincrement = this.sessionincrement.bind(this);\n    this.sessiondecrement = this.sessiondecrement.bind(this);\n    this.handlePlayPause = this.handlePlayPause.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.loop);\n  }\n\n  breakincrement(){\n    const { isPlaying, sessionbreak, currentTimer} = this.state;\n\n    if (this.state.sessionbreak < 60){\n        if(!isPlaying && currentTimer === 'Break') {\n          this.setState({\n            sessionbreak : parseInt(sessionbreak) + 1,\n            clockCount: parseInt(sessionbreak + 1) * 60\n          });\n        } else {\n        this.setState({\n          sessionbreak : sessionbreak + 1\n        });\n      }\n  }\n  }\n  breakdecrement(){\n    const { isPlaying, sessionbreak, currentTimer} = this.state;\n\n    if (sessionbreak > 1){\n      if(!isPlaying && currentTimer === 'Break') {\n        this.setState({\n          sessionbreak : parseInt(sessionbreak) - 1,\n          clockCount: parseInt(sessionbreak - 1)*60\n        });\n      } else {\n      this.setState({\n        sessionbreak : sessionbreak - 1\n      });\n    }\n  }\n  }\n  sessionincrement(){\n    const { isPlaying, session, currentTimer} = this.state;\n\n    if (this.state.session < 60){\n      if(!isPlaying && currentTimer === 'Session') {\n        this.setState({\n          session : parseInt(session) + 1,\n          clockCount: parseInt(session + 1)*60\n        });\n      } else {\n      this.setState({\n        session : session + 1\n      });\n    }\n  }\n  }\n  sessiondecrement(){\n    const { isPlaying, session, currentTimer} = this.state;\n\n    if(this.state.session > 0){\n      if(!isPlaying && currentTimer === 'Session') {\n        this.setState({\n          session : parseInt(session) - 1,\n          clockCount: parseInt(session - 1) * 60\n        });\n      } else {\n      this.setState({\n        session : session - 1\n      });\n    } \n  }\n  }\n\n  convertToTime = (count) => {\n    let minutes = Math.floor(count / 60);\n    let seconds = count % 60;\n\n    minutes = minutes < 10 ? ('0'+ minutes) : minutes;\n    seconds = seconds < 10 ? ('0'+ seconds) : seconds;\n    return `${minutes}:${seconds}`;\n  }\n\n  handlePlayPause = () => {\n    const { isPlaying } = this.state;\n\n    if (isPlaying){\n      clearInterval(this.loop); // clear the already running setInterval, so that it is not triggered again\n      this.setState({\n        isPlaying: false // the other button(icon) is rendered\n      })\n    }\n    else {\n      this.setState({\n        isPlaying: true\n      })\n    this.loop = setInterval(() => {\n      const { clockCount, currentTimer, sessionbreak, session } = this.state;\n\n      if ( clockCount === 0 ){ // change display when timer reaches zero\n        this.setState({\n          currentTimer: currentTimer === 'Session' ? 'Break' : 'Session',\n          clockCount: currentTimer === 'Session' ? sessionbreak * 60 : session * 60\n        })\n        document.getElementById('beep').play();\n      } else { // decrement the value each second\n        this.setState({\n          clockCount : clockCount - 1\n        })\n      }\n    }, 1000);\n    }\n  }\n\n  handleReset() {\n    clearInterval(this.loop);\n    this.setState({\n      clockCount : 25*60,\n      isPlaying : false,\n      currentTimer : \"Session\",\n      session : 25,\n      sessionbreak : 5\n    })\n    document.getElementById('beep').pause();\n    document.getElementById('beep').currentTime = 0;\n  }\n\n  render() {\n    const iconRender = () => {\n      if (this.state.isPlaying === false){\n        return <TiMediaPlay onClick={this.handlePlayPause} className=\"controls\" id=\"start_stop\"/>;\n      }\n      else if (this.state.isPlaying === true){\n        return <TiMediaStop onClick={this.handlePlayPause} className=\"controls\" id=\"start_stop\"/>;\n      }\n    }\n    return (\n      <div className=\"App\">\n      <div id=\"body-container\">\n        <div id=\"break-label\" className=\"s-box-container\">\n          <h3>Break length</h3>\n          <div className=\"counter-container\">\n              <TiArrowSortedUp onClick={this.breakincrement} id=\"break-increment\" className=\"icon\" />\n          <h1 id=\"break-length\">{this.state.sessionbreak}</h1>\n              <TiArrowSortedDown onClick={this.breakdecrement} id=\"break-decrement\" className=\"icon\" />\n          </div>\n          \n        </div>\n        <div id=\"timer-container\" className=\"b-box-container\">\n            <h1 id=\"timer-label\">{this.state.currentTimer}</h1>\n            <div id=\"time-left-container\">\n              <h1 id=\"time-left\">{this.convertToTime(this.state.clockCount)}</h1>\n            </div>\n            <div id=\"controls\" >\n              {iconRender()}\n              <BiReset onClick={this.handleReset} className=\"controls\" id=\"reset\" />\n            </div>\n        </div>\n        <div id=\"session-label\" className=\"s-box-container\">\n        <div className=\"counter-container\">\n              <TiArrowSortedUp id=\"session-increment\" onClick={this.sessionincrement} className=\"icon\" />\n          <h1 id=\"session-length\">{this.state.session}</h1>\n              < TiArrowSortedDown id=\"session-decrement\" onClick={this.sessiondecrement} className=\"icon\" />\n          </div>\n        <h3>Session length</h3>\n        </div>\n      </div>\n    </div>\n    )\n  }\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}